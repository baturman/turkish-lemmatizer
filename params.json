{"name":"Turkish-lemmatizer","tagline":"Turkish Lemmatizer is used for finding root form of Turkish words.","body":"### Introduction\r\nTurkish Lemmatizer is used for finding stem/root form of Turkish words\r\n\r\nIn morphologically complex languages such as Turkish, the stemming process is a difficult task. Therefore, usage of a lemmatizer is a wise solution. The approach that we take during lemmatization process is to use a predefined stem list and pick the one that has the longest matched from the beginning of word.\r\n\r\n### Lemmatization in Turkish Language\r\nTurkish language is morphologically complex language that the stem of a word can not be obtained by following a set of rules. In natural language processing, the stem of a word can be determined by the meaning they have. \r\n\r\nFor example, the following words\r\n\r\n* göz (eye)\r\n* gözlük (eyeglasses)\r\n* gözlükçü (optician)\r\n* gözlem (observation) \r\n\r\nhave the root form \"göz\". But if you reduce them to \"göz\", you will lose initial meaning of the words. With this approach, lemmatizer seems better option to find stem of turkish words.\r\n\r\nTurkish Lemmatizer uses \"Longest Matched Stemming\" algorithm. But besides, it handles some of the [turkish word formation](https://github.com/baturman/turkish-lemmatizer/wiki/Turkish-Word-Formation) that is commonly seen in turkish words. \r\n\r\n> TODO: English Translation required\r\n\r\nThose are:\r\n\r\n1. Ünsüz Yumuşaması \r\n2. Ünlü Daralması\r\n3. Ünlü Düşmesi\r\n4. Ünsüz Düşmesi\r\n5. Pekiştirme\r\n\r\nIn this lemmatization library, lemmatization process performance totally related with the supplied stem list.\r\n\r\n### Obtaining Library\r\n* Click download buttons on top of the page.\r\n* After you download, extract compressed file\r\n* You will have directory structure similar to following:\r\n\r\n```\r\nturkish-lemmatizer-v0.0.2/\r\n├── lib\r\n│   └── turkish-lemmatizer-0.0.2.jar\r\n├── LICENSE\r\n└── README.md\r\n```\r\n\r\n* Put jar file included in lib/ folder to your project's build path.\r\n* You are done.\r\n\r\n### Lemmatizer Usage\r\nCreate a lemmatizer object:\r\n\r\n```java\r\nTurkishLemmatizer tl = new TurkishLemmatizer();\r\n```\r\nUse ```java addStem(String stem);``` method to add your stem list to lemmatizer.\r\n\r\nComplete Example:\r\n\r\n```java\r\nTurkishLemmatizer tl = new TurkishLemmatizer();\r\ntry {\r\n     tl.addStem(\"kitap\");\r\n     tl.addStem(\"kulak\");\r\n     tl.addStem(\"ağaç\");\r\n     tl.addStem(\"yemek\");\r\n     tl.addStem(\"kalp\");\r\n     tl.addStem(\"çelenk\");\r\n     tl.addStem(\"metot\");\r\n     tl.addStem(\"hukuk\");\r\n     tl.addStem(\"genç\");\r\n     tl.addStem(\"et\");\r\n     tl.addStem(\"bekle\");\r\n     tl.addStem(\"kal\");\r\n     tl.addStem(\"özle\");\r\n} catch (NotAcceptableCharacterException e) {\r\n    e.printStackTrace();\r\n}\r\n```\r\n\r\nAfter adding your stem list. You can use `tl.lemmatize(String word)` method to get stem of the word. However lemmatizer may return more than one stem for some particular word. That means, there might be more than one suitable stem found after checking word formation rules. If lemmatizer, didnt return the correct stem, you may get other candidates which you will probably find correct stem in the candidates. For example:\r\n\r\n```java\r\n TurkishLemmatizer tl = new TurkishLemmatizer();\r\n try {\r\n     tl.addStem(\"kitap\");\r\n     tl.addStem(\"kulak\");\r\n     tl.addStem(\"ağaç\");\r\n     tl.addStem(\"yemek\");\r\n     tl.addStem(\"kalp\");\r\n     tl.addStem(\"çelenk\");\r\n     tl.addStem(\"metot\");\r\n     tl.addStem(\"hukuk\");\r\n     tl.addStem(\"genç\");\r\n     tl.addStem(\"et\");\r\n     tl.addStem(\"bekle\");\r\n     tl.addStem(\"kal\");\r\n     tl.addStem(\"özle\");\r\n     tl.addStem(\"kalp\");\r\n     \r\n     System.out.println(tl.lemmatize(\"kalbim\");\r\n     String [] digerleri = tl.getAllCandidates();\r\n     for (int i=0; i < digerleri.length; i++){\r\n         System.out.println((i+1)+ \" \" +digerleri[i]);\r\n     }\r\n } catch (NotAcceptableCharacterException e) {\r\n     e.printStackTrace();\r\n }\r\n```\r\n\r\nThe following code piece will output:\r\n\r\n```java\r\n kal\r\n 1 kal\r\n 2 kalp\r\n```\r\n\r\n### Support or Contact\r\nHaving trouble with lemmatizer? you may email your problems to me baturman (at) gmail.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}